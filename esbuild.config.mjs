import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';

import path from 'node:path';
import fs from 'node:fs';

import esbuildSvelte from 'esbuild-svelte';
import { sveltePreprocess } from 'svelte-preprocess';

const __dirname = path.dirname(new URL(import.meta.url).pathname);

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  plugins: [
    esbuildSvelte({
      compilerOptions: { css: 'injected' },
      preprocess: [sveltePreprocess()],
      filterWarnings() {
        return false;
      },
    }),
    {
      name: 'rename-css-plugin',
      setup(build) {
        build.onEnd((result) => {
          // 获取所有生成的CSS文件
          const outputs = result.metafile.outputs;
          // console.log('result.outputFiles[0].path', result);

          const cssFiles = Object.keys(outputs).filter((file) =>
            file.endsWith('.css'),
          );

          for (const file of cssFiles) {
            const newFileName = 'style.css'; // 修改后的文件名
            // 当前文件的路径
            // const
            // 获取output文件夹的路径
            // const outputPath = path.dirname(result.outputFiles[0].path);
            const oldPath = path.resolve(__dirname, file);
            const newPath = path.resolve(__dirname, 'dist', newFileName);
            // 重命名CSS文件
            fs.renameSync(oldPath, newPath);
            console.log(`Renamed ${file} to ${newFileName}`, {
              oldPath,
              newPath,
            });
            break;
          }
        });
      },
    },
  ],
  entryPoints: ['src/main.ts'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins,
  ],
  metafile: true,
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'dist/main.js',
});

if (prod) {
  const result = await context.rebuild();
  fs.writeFileSync('metafile.json', JSON.stringify(result.metafile));
  process.exit(0);
} else {
  await context.watch();
}
